<?php
/**
 * Nooku Framework - http://www.nooku.org
 *
 * @copyright	Copyright (C) 2011 - 2013 Timble CVBA and Contributors. (http://www.timble.net)
 * @license		GNU GPLv3 <http://www.gnu.org/licenses/gpl.html>
 * @link		git://git.assembla.com/nooku-framework.git
 */

namespace Nooku\Component\Searches;

use Nooku\Library;
use Nooku\Library\ObjectConfig;

/**
 *  Facets Model
 *
 * @author  Terry Visser <http://nooku.assembla.com/profile/terryvisser>
 * @package Nooku\Component\Searches
 */

class ModelFacets extends Library\ModelAbstract implements Library\ObjectSingleton
{
    protected  $_solarium;
    public function __construct(ObjectConfig $config)
    {
        parent::__construct($config);
        $config = array(
            'endpoint' => array(
                'localhost' => array(
                    'host' => '94.210.244.250',
                    'port' => '8983',
                    'path' => '/solr/',
                    'core' => 'poc'
                )
            )
        );


        // create a client instance
        $this->_solarium = new \Solarium\Client($config);

        // get a select query instance
        //$query = $this->_solarium->createSelect();



        $this->getState()
            ->insert('sort'        , 'cmd', 'custom')
            ->insert('field'       , 'word',"identifier_name")
            ->insert('name'        , 'word');

    }

    public function getRow()
    {


        if(!isset($this->_row))
        {
            $query = null;
            $state = $this->getState();

            if($state->isUnique())
            {
                $query = $this->_solarium->createSelect();

//                $this->_buildQueryColumns($query);
//                $this->_buildQueryTable($query);
//                $this->_buildQueryJoins($query);
//                $this->_buildQueryWhere($query);
//                $this->_buildQueryGroup($query);
//                $this->_buildQueryHaving($query);

                //$this->_row = $this->getTable()->select($query, Database::FETCH_ROW, array('state' => $state));
            }
            else $this->_row = $this->getTable()->getRow(array('state' => $state));
        }

        return $this->_row;
    }

    /**
     * Get a list of items which represents a  table rowset
     *
     * @return DatabaseRowsetInterface
     */
    public function getRowset()
    {
        // Get the data if it doesn't already exist
        if (!isset($this->_rowset))
        {
            $query = null;
            $state = $this->getState();

            if(!$state->isEmpty())
            {
                //$query = $this->_solarium->createTerms();

                // get a select query instance
                $query =  $this->_solarium->createSelect();

                $facetSet = $query->getFacetSet();

                $facetSet->createFacetField($state->field)->setField($state->field);
                $resultset =  $this->_solarium->select($query);

                $facet = $resultset->getFacetSet()->getFacet($state->field);
                $data = array();
                foreach($facet as $value => $count) {
                    $data[] = array(
                        'title' => $value
                    );
                }

                $this->_rowset = $this->getObject('com:searches.database.rowset.facets', array('data'=>$data));

            }
            else $this->_rowset = $this->getTable()->getRowset(array('state' => $state));
        }

        return $this->_rowset;
    }

    public function getTotal()
    {
        return parent::getTotal(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $query
     */
    protected function _buildQueryLimit($query)
    {
        $query->setStart($this->getState()->offset)->setRows($this->getState()->limit);
    }
}