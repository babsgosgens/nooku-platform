<?php
/**
 * Nooku Framework - http://www.nooku.org
 *
 * @copyright	Copyright (C) 2011 - 2013 Johan Janssens and Timble CVBA. (http://www.timble.net)
 * @license		GNU GPLv3 <http://www.gnu.org/licenses/gpl.html>
 * @link		git://git.assembla.com/nooku-framework.git for the canonical source repository
 */

namespace Nooku\Component\Solr;

use Nooku\Library;
use Nooku\Library\ObjectConfig;

/**
 *  Searches Model
 *
 * @author  Terry Visser <http://nooku.assembla.com/profile/terryvisser>
 * @package Nooku\Component\Solr
 */

class ModelResults extends Library\ModelAbstract
{
    /**
     * @param ObjectConfig $config
     */
    public function __construct(ObjectConfig $config)
    {
        parent::__construct($config);

        $this->getState()
            ->insert('limit'        , 'int')
            ->insert('offset'       , 'int')
            ->insert('sort'         , 'cmd')
            ->insert('direction'    , 'word', 'asc')
            ->insert('search'       , 'string')
            ->insert('identifier'   , 'string')
            ->insert('package'      , 'string')
            ->insert('distinct'     , 'string')
            ->insert('id'           , 'int', null, true);
    }

    /**
     * @param ObjectConfig $config
     */
    protected function _initialize(ObjectConfig $config)
    {
        /**
         * Getting the Search Engine params
         */
        $parameters = $this->getObject('application.extensions')->solr->params;

        $config->append(array(
            'searchengine' => array(
                'adapter'   => $parameters->get('adapter'),
                'url'       => $parameters->get('url'),
                'port'      => $parameters->get('port'),
                'instance'  => $parameters->get('instance'),
                'core'      => $parameters->get('core'),
                'username'  => $parameters->get('username'),
                'password'  => $parameters->get('password')
            )
        ));

        parent::_initialize($config); // TODO: Change the autogenerated stub
    }

    /**
     *
     * Get a row from the selected search engine
     *
     * @return Library\DatabaseRowInterface|Library\ObjectInterface|object
     */
    public function getRow()
    {
        $config = $this->getConfig();

        if(!isset($this->_row))
        {
            $query = null;
            $state = $this->getState();

            if($state->isUnique())
            {
                $result = $this->getObject('com:solr.adapter.engine.'.$config->get('searchengine')->adapter, $config->toArray())->getRow($state);
                $row = $this->getObject('com:solr.database.row.search', array('data' => $result));
            }

            $this->_row = $row;
        }

        return $this->_row;
    }

    /**
     *
     * Get a list of items which represents a  search engine rowset
     *
     * @return Library\DatabaseRowsetInterface|Library\ObjectInterface|object
     */
    public function getRowset()
    {
        $config = $this->getConfig();

        // Get the data if it doesn't already exist
        if (!isset($this->_rowset))
        {
            $query = null;
            $state = $this->getState();

            if(!$state->isEmpty())
            {
                $results = $this->getObject('com:solr.adapter.engine.'.$config->get('searchengine')->adapter, $config->toArray())->getRowset($state);

                $this->_total = $results['total'];

                if($this->_total > 0)
                {
                    $this->_rowset = $this->getObject('com:solr.database.rowset.results', array('data' => $results['items'], 'state' => $state));
                }
                else
                {
                    $this->_rowset = $this->getObject('com:solr.database.rowset.results', array('state' => $state));
                }
            }
            else $this->_rowset = $this->getObject('com:solr.database.rowset.results' , array('state' => $state));
        }

        return $this->_rowset;
    }

    /**
     *
     * @return int
     */
    public function getTotal()
    {
        return parent::getTotal(); // TODO: Change the autogenerated stub
    }
}